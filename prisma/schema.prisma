generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  name            String?
  provider        String // google || facebook || apple
  avatarUrl       String?
  phoneNumber     String?
  successfulDeals Int            @default(0)
  refreshTokens   RefreshToken[]
  classifieds     Classified[]   @relation("UserClassifieds")
  favorites       String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model AuthState {
  id           String   @id @default(uuid())
  state        String   @unique
  user         String
  accessToken  String
  refreshToken String
  expiresAt    DateTime
}

model Classified {
  id          String          @id @default(uuid())
  title       String
  description String
  price       Float
  images      String[] // URLs изображений в Supabase Storage
  isActive    Boolean         @default(true)
  views       Int             @default(0)
  messages    Int             @default(0)
  favorites   Int             @default(0)
  userId      String
  user        User            @relation("UserClassifieds", fields: [userId], references: [id], onDelete: Cascade)
  tags        ClassifiedTag[] // Необязательное поле
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Tag {
  id          String          @id @default(uuid())
  name        String          @unique
  classifieds ClassifiedTag[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ClassifiedTag {
  classifiedId String
  tagId        String
  classified   Classified @relation(fields: [classifiedId], references: [id], onDelete: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([classifiedId, tagId])
}
