generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  USD
  UAH
  EUR
}

enum Language {
  en
  uk
  pl
}

enum Gender {
  Male
  Female
}

model User {
  id               String         @id @default(uuid())
  providerId       String?        @unique
  email            String         @unique
  name             String?
  legalSurname     String?
  nickname         String?        @unique
  provider         String // google || facebook || apple
  avatarUrl        String?
  phoneNumber      String?
  extraPhoneNumber String?
  gender           Gender?
  birthday         String?
  trustRating      Int            @default(50) // 0-100
  bonuses          Int            @default(0)
  language         Language       @default(en)
  currency         Currency       @default(USD)
  city             String?
  notifications    Boolean        @default(true)
  showPhone        Boolean        @default(false)
  advancedUser     Boolean        @default(false)
  deleteReason     String?
  deletedAt        DateTime?
  successfulDeals  Int            @default(0)
  refreshTokens    RefreshToken[]
  classifieds      Classified[]   @relation("UserClassifieds")
  favorites        String[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model AuthState {
  id           String   @id @default(uuid())
  state        String   @unique
  user         String
  accessToken  String
  refreshToken String
  expiresAt    DateTime
}

model Classified {
  id          String          @id @default(uuid())
  title       String
  description String
  price       Float
  currency    Currency        @default(USD)
  images      String[] // URLs изображений в Supabase Storage
  isActive    Boolean         @default(true)
  views       Int             @default(0)
  messages    Int             @default(0)
  favorites   Int             @default(0)
  userId      String
  user        User            @relation("UserClassifieds", fields: [userId], references: [id], onDelete: Cascade)
  tags        ClassifiedTag[] // Необязательное поле
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Tag {
  id          String          @id @default(uuid())
  name        String          @unique
  classifieds ClassifiedTag[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ClassifiedTag {
  classifiedId String
  tagId        String
  classified   Classified @relation(fields: [classifiedId], references: [id], onDelete: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([classifiedId, tagId])
}
